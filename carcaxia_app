import React, { useState } from 'react';

// --- LOGO ---
const Logo = () => (
  <svg viewBox="0 0 500 500" style={{ width: '100%', height: '100%' }}>
    <circle cx="250" cy="250" r="240" fill="black" />
    <path d="M250 120 C300 120, 350 170, 350 220 C350 270, 300 320, 250 320" fill="none" stroke="white" strokeWidth="20" />
    <path d="M180 220 C180 170, 230 120, 280 120 C330 120, 380 170, 380 220" fill="none" stroke="white" strokeWidth="20" />
    <path d="M320 320 C270 320, 220 270, 220 220 C220 170, 270 120, 320 120" fill="none" stroke="white" strokeWidth="20" />
  </svg>
);

// --- BLOQUES DE INSCRICIÓN ---
const BLOCKS = [
  { name: 'Foliadiña', start: 1, end: 8 },
  // Este bloque non pintará filas porque end < start:
  { name: 'Obradoiro de Baile', start: 9, end: 8 },
  { name: 'Foliada', start: 9, end: 16 },
  { name: 'Grupo Sorpresa', start: 17, end: 32 }
];

function App() {
  // ESTADOS
  const [isAdmin, setIsAdmin] = useState(false);
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [showLoginDialog, setShowLoginDialog] = useState(false);
  const [selectedRow, setSelectedRow] = useState(null);

  // Para o formulario de login
  const [loginForm, setLoginForm] = useState({ username: '', password: '' });
  const [loginError, setLoginError] = useState('');

  // Táboa de rexistros
  // Engadimos 'editing' para que o admin poida editar.
  const [registrations, setRegistrations] = useState(
    Array(32).fill(null).map(() => ({
      nomeGrupo: '',
      asociacion: '',
      integrantes: '',
      registered: false,
      editing: false
    }))
  );

  // Notificacións
  const [notification, setNotification] = useState({ show: false, message: '', type: '' });

  // --- FUNCIONS DE NOTIFICACIÓN ---
  const showNotification = (message, type) => {
    setNotification({ show: true, message, type });
    setTimeout(() => {
      setNotification({ show: false, message: '', type: '' });
    }, 3000);
  };

  // --- FUNCIONS DE AUTENTICACIÓN ---
  const handleLogin = () => {
    // Validación simple de credenciais
    if (loginForm.username === 'Carcaxía' && loginForm.password === 'Carcaxia2003*') {
      setIsAdmin(true);
      setShowLoginDialog(false);
      setLoginForm({ username: '', password: '' });
      setLoginError('');
      showNotification('Sesión iniciada correctamente', 'success');
    } else {
      setLoginError('Usuario ou contrasinal incorrectos');
    }
  };

  const handleLogout = () => {
    setIsAdmin(false);
    showNotification('Sesión pechada correctamente', 'success');
  };

  // --- FUNCIONS DA TÁBOA ---

  // Manipulación de inputs (Nome, Asociación, Integrantes)
  const handleInputChange = (index, field, value) => {
    // Se non es admin e esa posición xa está rexistrada, non permitimos editar (lógica de usuario)
    if (!isAdmin && registrations[index].registered) return;

    setRegistrations((prev) => {
      const newRegistrations = [...prev];
      if (field === 'integrantes') {
        // Só díxitos, e impide 0
        value = value.replace(/\D/g, '');
        if (value === '' || parseInt(value) <= 0) value = '';
      }
      newRegistrations[index] = {
        ...newRegistrations[index],
        [field]: value
      };
      return newRegistrations;
    });
  };

  // Comproba se todos os campos están cubertos antes de inscribirse (usuario normal)
  const isRowComplete = (index) => {
    const row = registrations[index];
    return (
      row.nomeGrupo.trim() !== '' &&
      row.asociacion.trim() !== '' &&
      row.integrantes !== ''
    );
  };

  // Cando o usuario fai clic en "Inscribirse" ou "Cancelar"
  const handleRegisterClick = (index) => {
    // Se é usuario normal e non completou a fila, aviso
    if (!isAdmin && !isRowComplete(index)) {
      showNotification('Debes cubrir tódolos campos antes de inscribirte', 'error');
      return;
    }
    setSelectedRow(index);
    setShowConfirmDialog(true);
  };

  // Confirma a acción de inscribirse ou cancelar (usuario normal)
  const handleRegister = (index) => {
    setRegistrations((prev) => {
      const newRegistrations = [...prev];
      if (prev[index].registered) {
        // Se xa estaba rexistrado -> Cancelar
        newRegistrations[index] = {
          ...newRegistrations[index],
          nomeGrupo: '',
          asociacion: '',
          integrantes: '',
          registered: false
        };
      } else {
        // Inscribir
        newRegistrations[index] = {
          ...newRegistrations[index],
          registered: true
        };
      }
      return newRegistrations;
    });

    // Amosamos notificación
    const wasRegistered = registrations[index].registered;
    const message = wasRegistered ? 'Cancelouse a inscrición' : 'Rexistrado correctamente';
    showNotification(message, wasRegistered ? 'error' : 'success');
    setShowConfirmDialog(false);
  };

  // --- NOVAS FUNCIONS DE ADMIN ---

  // Premer "Editar": habilita a edición nesa fila
  const handleAdminEdit = (index) => {
    setRegistrations((prev) => {
      const newRegistrations = [...prev];
      newRegistrations[index].editing = true;
      return newRegistrations;
    });
  };

  // Premer "Gardar": deshabilita a edición e marca a fila como "registered" se hai datos
  const handleAdminSave = (index) => {
    setRegistrations((prev) => {
      const newRegistrations = [...prev];
      newRegistrations[index].editing = false;
      // Se os campos non están baleiros, marcámolo como rexistrado
      const row = newRegistrations[index];
      if (row.nomeGrupo.trim() !== '' || row.asociacion.trim() !== '' || row.integrantes !== '') {
        newRegistrations[index].registered = true;
      } else {
        // Se non hai datos, non o consideramos rexistrado
        newRegistrations[index].registered = false;
      }
      return newRegistrations;
    });
  };

  // Premer "X": elimina directamente o rexistro
  const handleAdminDelete = (index) => {
    setRegistrations((prev) => {
      const newRegistrations = [...prev];
      newRegistrations[index] = {
        nomeGrupo: '',
        asociacion: '',
        integrantes: '',
        registered: false,
        editing: false
      };
      return newRegistrations;
    });
    showNotification('Rexistro eliminado', 'success');
  };

  // Renderiza as filas da táboa por bloques
  const renderTableRows = () => {
    return BLOCKS.flatMap((block) => {
      // Fila "cabeceira" de bloque
      const rows = [
        <tr key={`block-${block.name}`} style={{ backgroundColor: '#e3f2fd', fontWeight: 'bold' }}>
          <td colSpan={5} style={{ padding: '12px', textAlign: 'center', border: '1px solid #ddd' }}>
            {block.name}
          </td>
        </tr>
      ];

      // Só iteramos se end >= start
      if (block.end >= block.start) {
        for (let i = block.start - 1; i < block.end; i++) {
          const rowData = registrations[i];
          const isRegisteredAndNotAdmin = !isAdmin && rowData.registered;

          // Determina a cor de fondo segundo o estado
          let bgColor = '#ffffff';
          if (rowData.registered) {
            bgColor = isAdmin ? '#e8f5e9' : '#ffebee';
          }

          rows.push(
            <tr key={`registration-${i}`} style={{ backgroundColor: bgColor }}>
              {/* Índice / Orde */}
              <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #ddd' }}>
                {i + 1}
              </td>

              {/* Celdas de datos */}
              {isAdmin ? (
                // --- MODO ADMIN ---
                rowData.editing ? (
                  // Se está en modo edición, mostramos inputs
                  <>
                    <td style={{ padding: '12px', border: '1px solid #ddd' }}>
                      <input
                        type="text"
                        value={rowData.nomeGrupo}
                        onChange={(e) => handleInputChange(i, 'nomeGrupo', e.target.value)}
                        style={{
                          width: '100%',
                          padding: '8px',
                          borderRadius: '4px',
                          border: '1px solid #ddd'
                        }}
                        placeholder="Nome do grupo..."
                      />
                    </td>
                    <td style={{ padding: '12px', border: '1px solid #ddd' }}>
                      <input
                        type="text"
                        value={rowData.asociacion}
                        onChange={(e) => handleInputChange(i, 'asociacion', e.target.value)}
                        style={{
                          width: '100%',
                          padding: '8px',
                          borderRadius: '4px',
                          border: '1px solid #ddd'
                        }}
                        placeholder="Asociación..."
                      />
                    </td>
                    <td style={{ padding: '12px', border: '1px solid #ddd' }}>
                      <input
                        type="number"
                        value={rowData.integrantes}
                        onChange={(e) => handleInputChange(i, 'integrantes', e.target.value)}
                        style={{
                          width: '100%',
                          padding: '8px',
                          borderRadius: '4px',
                          border: '1px solid #ddd'
                        }}
                        min="1"
                        placeholder="Nº..."
                      />
                    </td>
                    <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #ddd' }}>
                      {/* Accións en modo edición */}
                      <button
                        onClick={() => handleAdminSave(i)}
                        style={{
                          padding: '8px 16px',
                          borderRadius: '4px',
                          border: 'none',
                          cursor: 'pointer',
                          backgroundColor: '#4CAF50',
                          color: 'white',
                          marginRight: '8px'
                        }}
                      >
                        Gardar
                      </button>
                      {rowData.registered && (
                        <button
                          onClick={() => handleAdminDelete(i)}
                          style={{
                            padding: '8px 16px',
                            borderRadius: '4px',
                            border: 'none',
                            cursor: 'pointer',
                            backgroundColor: '#f44336',
                            color: 'white'
                          }}
                        >
                          X
                        </button>
                      )}
                    </td>
                  </>
                ) : (
                  // Se NON está en modo edición, mostramos a información en modo lectura
                  <>
                    <td style={{ padding: '12px', border: '1px solid #ddd' }}>
                      {rowData.nomeGrupo || <span style={{ color: '#aaa' }}>(Baleiro)</span>}
                    </td>
                    <td style={{ padding: '12px', border: '1px solid #ddd' }}>
                      {rowData.asociacion || <span style={{ color: '#aaa' }}>(Baleiro)</span>}
                    </td>
                    <td style={{ padding: '12px', border: '1px solid #ddd' }}>
                      {rowData.integrantes || <span style={{ color: '#aaa' }}>(Baleiro)</span>}
                    </td>
                    <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #ddd' }}>
                      {/* Botón Editar */}
                      <button
                        onClick={() => handleAdminEdit(i)}
                        style={{
                          padding: '8px 16px',
                          borderRadius: '4px',
                          border: 'none',
                          cursor: 'pointer',
                          backgroundColor: '#2196F3',
                          color: 'white',
                          marginRight: '8px'
                        }}
                      >
                        Editar
                      </button>
                      {/* Se está "registered", amosamos a X para eliminar */}
                      {rowData.registered && (
                        <button
                          onClick={() => handleAdminDelete(i)}
                          style={{
                            padding: '8px 16px',
                            borderRadius: '4px',
                            border: 'none',
                            cursor: 'pointer',
                            backgroundColor: '#f44336',
                            color: 'white'
                          }}
                        >
                          X
                        </button>
                      )}
                    </td>
                  </>
                )
              ) : (
                // --- MODO USUARIO ---
                <>
                  <td style={{ padding: '12px', border: '1px solid #ddd' }}>
                    {isRegisteredAndNotAdmin ? (
                      <div style={{ textAlign: 'center', color: '#666' }}>Reservado</div>
                    ) : (
                      <input
                        type="text"
                        value={rowData.nomeGrupo}
                        onChange={(e) => handleInputChange(i, 'nomeGrupo', e.target.value)}
                        style={{
                          width: '100%',
                          padding: '8px',
                          borderRadius: '4px',
                          border: '1px solid #ddd',
                          backgroundColor: isRegisteredAndNotAdmin ? '#f5f5f5' : '#ffffff'
                        }}
                        disabled={isRegisteredAndNotAdmin}
                        placeholder="Nome do grupo..."
                      />
                    )}
                  </td>
                  <td style={{ padding: '12px', border: '1px solid #ddd' }}>
                    {isRegisteredAndNotAdmin ? (
                      <div style={{ textAlign: 'center', color: '#666' }}>Reservado</div>
                    ) : (
                      <input
                        type="text"
                        value={rowData.asociacion}
                        onChange={(e) => handleInputChange(i, 'asociacion', e.target.value)}
                        style={{
                          width: '100%',
                          padding: '8px',
                          borderRadius: '4px',
                          border: '1px solid #ddd',
                          backgroundColor: isRegisteredAndNotAdmin ? '#f5f5f5' : '#ffffff'
                        }}
                        disabled={isRegisteredAndNotAdmin}
                        placeholder="Asociación..."
                      />
                    )}
                  </td>
                  <td style={{ padding: '12px', border: '1px solid #ddd' }}>
                    {isRegisteredAndNotAdmin ? (
                      <div style={{ textAlign: 'center', color: '#666' }}>Reservado</div>
                    ) : (
                      <input
                        type="number"
                        value={rowData.integrantes}
                        onChange={(e) => handleInputChange(i, 'integrantes', e.target.value)}
                        style={{
                          width: '100%',
                          padding: '8px',
                          borderRadius: '4px',
                          border: '1px solid #ddd',
                          backgroundColor: isRegisteredAndNotAdmin ? '#f5f5f5' : '#ffffff'
                        }}
                        disabled={isRegisteredAndNotAdmin}
                        min="1"
                        placeholder="Nº..."
                      />
                    )}
                  </td>
                  <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #ddd' }}>
                    {isRegisteredAndNotAdmin ? (
                      <div
                        style={{
                          padding: '8px 16px',
                          backgroundColor: '#ffebee',
                          color: '#666',
                          borderRadius: '4px',
                          display: 'inline-block'
                        }}
                      >
                        Ocupado
                      </div>
                    ) : (
                      <button
                        onClick={() => handleRegisterClick(i)}
                        style={{
                          padding: '8px 16px',
                          borderRadius: '4px',
                          border: 'none',
                          cursor: 'pointer',
                          backgroundColor: rowData.registered ? '#f44336' : '#4CAF50',
                          color: 'white'
                        }}
                      >
                        {rowData.registered ? 'Cancelar' : 'Inscribirse'}
                      </button>
                    )}
                  </td>
                </>
              )}
            </tr>
          );
        }
      }
      return rows;
    });
  };

  // Definimos unha variable para simplificar a lóxica no diálogo de confirmación do usuario
  const isRowRegistered =
    selectedRow !== null &&
    registrations[selectedRow] &&
    registrations[selectedRow].registered;

  return (
    <div style={{ position: 'relative', padding: '20px', maxWidth: '1200px', margin: '0 auto' }}>
      {/* BOTÓN ADMIN / LOGOUT */}
      <div style={{ position: 'absolute', top: '20px', right: '20px' }}>
        {isAdmin ? (
          <button
            onClick={handleLogout}
            style={{
              padding: '8px 16px',
              borderRadius: '4px',
              border: '1px solid #ddd',
              backgroundColor: 'white',
              cursor: 'pointer',
              opacity: 0.3,
              transition: 'opacity 0.3s'
            }}
            onMouseEnter={(e) => (e.target.style.opacity = 1)}
            onMouseLeave={(e) => (e.target.style.opacity = 0.3)}
          >
            Pechar sesión
          </button>
        ) : (
          <button
            onClick={() => setShowLoginDialog(true)}
            style={{
              padding: '8px 16px',
              borderRadius: '4px',
              border: '1px solid #ddd',
              backgroundColor: 'white',
              cursor: 'pointer',
              opacity: 0.3,
              transition: 'opacity 0.3s'
            }}
            onMouseEnter={(e) => (e.target.style.opacity = 1)}
            onMouseLeave={(e) => (e.target.style.opacity = 0.3)}
          >
            Modo Admin
          </button>
        )}
      </div>

      {/* DIÁLOGO DE LOGIN */}
      {showLoginDialog && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.5)',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: 1000
          }}
        >
          <div
            style={{
              backgroundColor: 'white',
              padding: '24px',
              borderRadius: '8px',
              maxWidth: '400px',
              width: '90%'
            }}
          >
            <h2
              style={{
                marginBottom: '20px',
                textAlign: 'center',
                fontSize: '1.5em',
                color: '#333'
              }}
            >
              Acceso Administrador
            </h2>

            {loginError && (
              <div
                style={{
                  padding: '10px',
                  marginBottom: '15px',
                  backgroundColor: '#ffebee',
                  color: '#c62828',
                  borderRadius: '4px',
                  fontSize: '0.9em',
                  textAlign: 'center'
                }}
              >
                {loginError}
              </div>
            )}

            <div style={{ marginBottom: '15px' }}>
              <input
                type="text"
                placeholder="Usuario"
                value={loginForm.username}
                onChange={(e) => {
                  setLoginForm((prev) => ({ ...prev, username: e.target.value }));
                  setLoginError('');
                }}
                style={{
                  width: '100%',
                  padding: '10px',
                  borderRadius: '4px',
                  border: '1px solid #ddd',
                  fontSize: '1em'
                }}
              />
            </div>

            <div style={{ marginBottom: '20px' }}>
              <input
                type="password"
                placeholder="Contrasinal"
                value={loginForm.password}
                onChange={(e) => {
                  setLoginForm((prev) => ({ ...prev, password: e.target.value }));
                  setLoginError('');
                }}
                style={{
                  width: '100%',
                  padding: '10px',
                  borderRadius: '4px',
                  border: '1px solid #ddd',
                  fontSize: '1em'
                }}
              />
            </div>

            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>
              <button
                onClick={() => {
                  setShowLoginDialog(false);
                  setLoginForm({ username: '', password: '' });
                  setLoginError('');
                }}
                style={{
                  padding: '8px 16px',
                  borderRadius: '4px',
                  border: '1px solid #ddd',
                  backgroundColor: 'white',
                  cursor: 'pointer'
                }}
              >
                Cancelar
              </button>
              <button
                onClick={handleLogin}
                style={{
                  padding: '8px 16px',
                  borderRadius: '4px',
                  border: 'none',
                  backgroundColor: '#4CAF50',
                  color: 'white',
                  cursor: 'pointer'
                }}
              >
                Acceder
              </button>
            </div>
          </div>
        </div>
      )}

      {/* NOTIFICACIÓNS */}
      {notification.show && (
        <div
          style={{
            position: 'fixed',
            top: '20px',
            right: '20px',
            padding: '16px',
            borderRadius: '4px',
            backgroundColor: notification.type === 'success' ? '#4CAF50' : '#f44336',
            color: 'white',
            zIndex: 1000,
            boxShadow: '0 2px 4px rgba(0,0,0,0.2)'
          }}
        >
          {notification.message}
        </div>
      )}

      {/* DIÁLOGO DE CONFIRMACIÓN (INSCRICIÓN / CANCELACIÓN) PARA USUARIO */}
      {showConfirmDialog && !isAdmin && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.5)',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: 1000
          }}
        >
          <div
            style={{
              backgroundColor: 'white',
              padding: '20px',
              borderRadius: '8px',
              maxWidth: '500px',
              width: '90%'
            }}
          >
            <h2 style={{ marginBottom: '16px' }}>
              {isRowRegistered ? 'Confirmar Cancelación' : 'Confirmar Inscrición'}
            </h2>
            <p style={{ marginBottom: '20px' }}>
              {isRowRegistered
                ? 'Estás seguro/a de que queres cancelar esta inscrición?'
                : 'Estás seguro/a de que queres inscribirte nesta posición? Unha vez confirmado, non poderás modificar os datos.'}
            </p>
            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>
              <button
                onClick={() => setShowConfirmDialog(false)}
                style={{
                  padding: '8px 16px',
                  borderRadius: '4px',
                  border: '1px solid #ddd',
                  backgroundColor: 'white',
                  cursor: 'pointer'
                }}
              >
                Cancelar
              </button>
              <button
                onClick={() => selectedRow !== null && handleRegister(selectedRow)}
                style={{
                  padding: '8px 16px',
                  borderRadius: '4px',
                  border: 'none',
                  backgroundColor: '#4CAF50',
                  color: 'white',
                  cursor: 'pointer'
                }}
              >
                Confirmar
              </button>
            </div>
          </div>
        </div>
      )}

      {/* CONTEDOR PRINCIPAL CON LOGO E TÁBOA */}
      <div
        style={{
          backgroundColor: 'white',
          borderRadius: '8px',
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
          overflow: 'hidden'
        }}
      >
        <div style={{ textAlign: 'center', padding: '20px' }}>
          <div style={{ width: '75.6px', height: '75.6px', margin: '0 auto 20px' }}>
            <Logo />
          </div>
          <h1 style={{ fontSize: '2em', marginBottom: '10px' }}>V Foliada Carcaxía</h1>
          <div style={{ color: '#666' }}>A.C.D. Carcaxía - Dende 2003</div>
        </div>

        {/* TÁBOA DE INSCRICIÓNS */}
        <div style={{ overflowX: 'auto', padding: '20px' }}>
          <table style={{ width: '100%', borderCollapse: 'collapse' }}>
            <thead>
              <tr style={{ backgroundColor: '#f5f5f5' }}>
                <th style={{ padding: '12px', textAlign: 'center', border: '1px solid #ddd' }}>Orde</th>
                <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #ddd' }}>Nome do Grupo</th>
                <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #ddd' }}>Asociación</th>
                <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #ddd' }}>Nº de integrantes</th>
                <th style={{ padding: '12px', textAlign: 'center', border: '1px solid #ddd' }}>Acción</th>
              </tr>
            </thead>
            <tbody>{renderTableRows()}</tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

export default App;
